/* 
 * File:   manejador_disco.c
 *
 *
 * Created on 31 de enero de 2016, 11:50
 */

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <time.h>
#include <semaphore.h>
#define TRUE 1
#define N 100

/* ESTRUCTURAS Y VARIABLES GLOBALES DEL MODULO DE DISCO*/
int Arbol[N];
typedef struct 
{
	int id_proceso, numero_proceso;
	int prioridad, tamano;
	char estado_proceso[10], nombre_proceso[20];
}PCB;
typedef PCB pcb_procesos[N];
int TC;
int IRQ; // variable que compartiremos con el manejador de interrupciones para saber que pide el proceso....
int manejador_quien;  // variable que compartiremos con el manejador de interrupciones para saber en que posicion del vector de PCB se encuentra el proceso....
sem_t mutex_IRQ;  // semaforo que garantiza la exclusion mutua sobre IRQ.......
typedef int Tvector[N];
Tvector Cola_Solicitudes;
Tvector vnodos;
/**********************************************************************************/

/* FUNCIONES Y PROCEDIMIENTOS PARA EL MANEJO DEL DISCO (SE UTILIZARA EL ALGORITMO DE LOS ASOCIADOS)*/
void Disco(pcb_procesos vector_pcb, int IRQ, int manejador_quien);
void reservaSegmento(int,int);
int Ocupado(int);
void Dividir(int);
int potencia(int,int);
void liberar(int request);
void liberacion_40(int TTotal,int A[],Tvector C_Solicitudes,int TC,Tvector vnodos);
int Mem_Usada(int A[]);
int buscar_nodo(int request);
void Desfragmentar(int nodo);
void Desfragmentar_Arbol(Tvector nodos,int TC);
void inicializar(Tvector A); /// ESTE PROCEDIMIENTO SE DEBE LLAMAR ANTES DE UTILIZAR EL MODULO DE INTERRUPCIONES, PARA QUE PUEDAN FUNCIONAR BIEN LAS VARIABLES GLOBALES....
/*************************************************************************************************/

int main()
{
    /* NUESTRO CODIGO VA A SER UN PROCEDIMIENTO... ALGO ASI: Disco(PCB pcb_procesos, int IRQ, int manejador_quien)*/
    /* ADENTRO DE Disco(): 
    (1) SE VERIFICA QUE TIPO DE IRQ ES....
    (2) SI IRQ ES 4, SE BUSCA EN EL VECTOR DE PCB EL TAMAÑO DEL DATO Y ESE SERA " numero" PARA EMPEZAR LA ASIGNACION.....
    (3) SI IRQ ES 7, SE LLAMA A Desfragmentar_Arbol(vnodos,TC)*/
    pcb_procesos vector_pcb;
    int TamanhoM=5120;
    TC = 0;           
        inicializar(Cola_Solicitudes); 
        inicializar(vnodos);
        sem_init(&mutex_IRQ, 0, 1); ///SEMAFOROS
    
		for(manejador_quien=1; manejador_quien<= 25; manejador_quien++){ 
		vector_pcb[manejador_quien].tamano = ((rand()% 3== 0)? 8:((rand()% 3== 1)? 12: 16) );
		Disco(vector_pcb,4,manejador_quien);
        Cola_Solicitudes[TC] = vector_pcb[manejador_quien].tamano;
		vnodos[TC]=buscar_nodo(vector_pcb[manejador_quien].tamano);
		TC++;
		}
		Disco(vector_pcb,7,manejador_quien);
	return 0;
}

void inicializar(Tvector A)
{
    int i;
    for(i=0;i<=N; i++)
	A[i]=-1;

}

void Disco(pcb_procesos vector_pcb, int IRQ, int manejador_quien)
{
     int TamanhoM = 1024, x, y;
            
     sem_wait(&mutex_IRQ);//Se bloquea el semmáforo mutex para que ningún otro proceso pueda solicitar espacio
     if(IRQ == 4)
     {
			reservaSegmento(TamanhoM, vector_pcb[manejador_quien].tamano);
     }
     if(IRQ == 7)
     {
				if(Mem_Usada(Arbol)>0.10*TamanhoM);
				{
					if(Mem_Usada(Arbol)>0.70*TamanhoM)
						liberacion_40(TamanhoM,Arbol,Cola_Solicitudes,TC,vnodos);
					Desfragmentar_Arbol(vnodos,TC);           	
				}
     }
     sem_post(&mutex_IRQ); //Libera el semáforo   
}

void reservaSegmento(int tsize,int request)
{
	int flevel=0,size,i,band;
	size=tsize;
	if(request>0)
	{
	if(request>=tsize)
	{
		printf("El sistema no tiene espacio en el disco.\n");
	}else{
			band=1;
			while(TRUE && band ==1 )
			{
				if(request<=size && request>(size/2))
				{
					band=0;
				}else{
						size/=2;
						flevel++;
					}
			}
			band=1;
			for(i=potencia(2,flevel)-1;(i<=(potencia(2,flevel+1)-2))&& band==1;i++)
			{
				if(Arbol[i]==0 && Ocupado(i))
				{
					Arbol[i]=request;
					Dividir(i);//se marca el padre con 1.
					printf("Reserva Existosa.\n");
					band=0;
				}
				
			}
			if(i==potencia(2,flevel+1)-1)
			{
				printf("El sistema no tiene espacio en el disco, use memoria virtual\n");
			}
		}
	}
}
int Ocupado(int nodo)
{
	int rtn=1;
	
	while(nodo!=0)
	{
		nodo=nodo%2==0?(nodo-1)/2:nodo/2;
		if(Arbol[nodo]>1)
			rtn=0;
	}
	return rtn;
}

void Dividir(int nodo)
{
	while(nodo!=0)
	{
		nodo=nodo%2==0?(nodo-1)/2:nodo/2;
		Arbol[nodo]=1;
	}
}

int potencia(int x,int y)
{
	int ans,z,rtn;
	if(y==0)
	{
		rtn=1;
	}else{
			ans=x;
			for(z=1;z<y;z++)
				ans*=x;
			rtn=ans;
		}
	return rtn;
}

void liberar(int request)
{
    ///Solo Libera sin desfragmentar.
        int nodo;
        nodo=buscar_nodo(request);
        if(nodo!=-1)
			Arbol[nodo]=0;///Libero el nodo.
		else
			printf("Solicitud invalida.\n");
        
}

int buscar_nodo(int request)
{
    int nodo=0,band=1;
	while(band==1 && nodo<N)
	{
		if(Arbol[nodo]==request)
		{
			band=0;

		}else{
			nodo++;
		}
	}
	if(nodo==N && band==1)
		nodo=-1;
    return nodo; /// el nodo que pertenecea a mi request.
}

void Desfragmentar_Arbol(Tvector nodos,int TC)
{
	int i;
    for(i=0;i<TC; i++)
    {
        Desfragmentar(nodos[i]);
    }
}
void Desfragmentar(int nodo)
{
    int band;
    band=1;
	while(nodo!=0 && band==1)
	{
		if(Arbol[nodo%2==0?nodo-1:nodo+1]==0 && Arbol[nodo]==0)
		{
			Arbol[nodo%2==0?(nodo-1)/2:nodo/2]=0;
			nodo=nodo%2==0?(nodo-1)/2:nodo/2;
		}else{

			band=0;
		}
	}
	printf("\nDesfragmentacion Realizada\n");
}

void liberacion_40(int TTotal,int A[],Tvector C_Solicitudes,int TC,Tvector vnodos)
{
	int Porcentaje,k,l;
	
	
	Porcentaje=TTotal*0.70; /// 5000mb 
	
	if(Mem_Usada(A) >=Porcentaje) ///4132
	{
		int aux=Mem_Usada(A)*0.4 ;
		int i=0;
		while(aux>0 && i<=TC)
		{
			liberar(C_Solicitudes[i]);
			aux-= C_Solicitudes[i];
                        C_Solicitudes[i]=-1;
                        vnodos[i]=-1;
			i++;
		 }
                ///para actualizar el vector de solicitudes
                int band=0;
                for(k=0;k<TC;k++)
                {
                    band=0;
                    for(l=k;l<TC && band!=1;l++)
                    {
                        if(C_Solicitudes[k]==-1 && C_Solicitudes[l]>0)
                        {
                            C_Solicitudes[k]=C_Solicitudes[l];
                            C_Solicitudes[l]=-1;
                            
                            vnodos[k]=vnodos[l];
                            vnodos[l]=-1;
                            band=1;
                        }
                    }
                }
	}
}

int Mem_Usada(int A[])
{
	int i,sum=0; 
	for(i= 0; i< N; i++)
	{
		if(A[i]>1)
			sum+=A[i];
	}
	
	return sum;
}
